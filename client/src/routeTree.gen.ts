/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as FormulasIndexImport } from './routes/formulas/index'
import { Route as FormulasNewImport } from './routes/formulas/new'
import { Route as FormulasIdImport } from './routes/formulas/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FormulasIndexRoute = FormulasIndexImport.update({
  id: '/formulas/',
  path: '/formulas/',
  getParentRoute: () => rootRoute,
} as any)

const FormulasNewRoute = FormulasNewImport.update({
  id: '/formulas/new',
  path: '/formulas/new',
  getParentRoute: () => rootRoute,
} as any)

const FormulasIdRoute = FormulasIdImport.update({
  id: '/formulas/$id',
  path: '/formulas/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/formulas/$id': {
      id: '/formulas/$id'
      path: '/formulas/$id'
      fullPath: '/formulas/$id'
      preLoaderRoute: typeof FormulasIdImport
      parentRoute: typeof rootRoute
    }
    '/formulas/new': {
      id: '/formulas/new'
      path: '/formulas/new'
      fullPath: '/formulas/new'
      preLoaderRoute: typeof FormulasNewImport
      parentRoute: typeof rootRoute
    }
    '/formulas/': {
      id: '/formulas/'
      path: '/formulas'
      fullPath: '/formulas'
      preLoaderRoute: typeof FormulasIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/formulas/$id': typeof FormulasIdRoute
  '/formulas/new': typeof FormulasNewRoute
  '/formulas': typeof FormulasIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/formulas/$id': typeof FormulasIdRoute
  '/formulas/new': typeof FormulasNewRoute
  '/formulas': typeof FormulasIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/formulas/$id': typeof FormulasIdRoute
  '/formulas/new': typeof FormulasNewRoute
  '/formulas/': typeof FormulasIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/formulas/$id' | '/formulas/new' | '/formulas'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/formulas/$id' | '/formulas/new' | '/formulas'
  id: '__root__' | '/' | '/formulas/$id' | '/formulas/new' | '/formulas/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FormulasIdRoute: typeof FormulasIdRoute
  FormulasNewRoute: typeof FormulasNewRoute
  FormulasIndexRoute: typeof FormulasIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FormulasIdRoute: FormulasIdRoute,
  FormulasNewRoute: FormulasNewRoute,
  FormulasIndexRoute: FormulasIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/formulas/$id",
        "/formulas/new",
        "/formulas/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/formulas/$id": {
      "filePath": "formulas/$id.tsx"
    },
    "/formulas/new": {
      "filePath": "formulas/new.tsx"
    },
    "/formulas/": {
      "filePath": "formulas/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
